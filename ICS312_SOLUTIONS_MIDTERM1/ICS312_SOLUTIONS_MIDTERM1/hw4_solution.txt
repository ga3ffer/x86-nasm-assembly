Exercise #1:

Since the program is written using hex and the output is in decimal,
let us first convert the output into hex as well:

65462d = 0000 FFB6h (value in eax)

Since "movzx eax, ax" does not add any F's, this means that 
the result of "add ax, bx" is FFB6h.   However, ax=0035h. Therefore:

0035h + bx = FFB6h

which implies: bx = FF81h

This value is obtained in bx after "movsx bs, bl" if bl=81h  (the most
significant bit of 81h is 1, and the sign extension replicates the sign bit).

We conclude that the answer is: 0??h=081h

----------------------------------------------------------

Exercise #2: 

* 8FF0 + A026

   8FF0
  +A026
  -----
  13016         We have a carry

  If numbers are intended as signed, we're adding two negative
  numbers and obtain a positive one (3016). Therefore OF=1
	(we could also simply reason on the valid range)

  CF=1  OF=1

  If the result were sign-extended into EAX, EAX would contain: 00 00 30 16
  print_int would print 3*16^3 + 1*16^1 + 6*16^0 = 12310

* 6043 + 7ABC

  6043
 +7ABC
 -----
  DAFF         We have no carry

  If the numbers are intended as signed, we're adding two
  positive numbers and obtain a negative one (DAFF). Therefore
  OF = 1.
	(We could also simply reason on the valid range)

  CF=0  OF=1

  If the result were sign-extended into EAX, EAX would contain: FF FF DA FF
  This is anegative number. Let's compute its base-10 representation:
	take the 1's complement: 00 00 25 00
	add 1:			 00 00 25 01
  print_int would print 2*16^3 + 5*16^2 + 1*16^0 = -9473

* F3 + 0D

   F3
  +0D
  ---
  100          We have a carry

  If the numbers are intended as signed, F3h = -13, 0D = +13, so
  00 is the right answer.

  CF=1  OF=0

  If the result were sign-extended into EAX, EAX would contain: 00 00 00 00
  print_int would print 0

* E5 + 03

   E5
  +03
  ---
   E8          We have no carry

  If the numbers are intended as signed, E5 = -27, and 03 = +3,
  so E8 = -24 is the right answer.

  CF=0  OF=0

  If the result were sign-extended into EAX, EAX would contain: 00 00 00 00
  print_int would print -24
